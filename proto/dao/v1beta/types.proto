syntax = "proto3";
package metachain.dao.v1beta1;

option go_package = "github.com/interchainberlin/metachain/x/dao";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

// A polity is an account governed by a group
message Polity {
    // the account or address that collectively represents the polity
    string account = 1;

    // the group interface for reading member sets
    google.protobuf.Any group = 2 [(cosmos_proto.accepts_interface) = "Group"];

    // decision_policy is the updated group account decision policy.
    google.protobuf.Any decision_policy = 3 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
    
    // proposal_filter filters incoming proposals.
    google.protobuf.Any proposal_filter = 4 [(cosmos_proto.accepts_interface) = "ProposalFilter"];
    
    // the voting window for each proposal
    google.protobuf.Duration voting_period = 5;

    // indicates whether proposals can be received from anyone or members only
    bool public = 6;

    // indicates which account has control over the polity i.e. changing 
    // the decision policy or the proposal filter. This allows for nested polity's 
    // where a parent polity has partial governance over this polity. Leave it empty
    // to indicate that the polity is soverign 
    string parent = 7; 
}

// Proposal defines a group proposal.
message Proposal {
    // the unique id of the proposal
    uint64 proposal_id = 1;

    // the account proposing the action
    string proposer = 2;

    // the group account that will execute the action, define 
    // the members eligible to vote as well as the proposal filter
    // and decision policy involved with the proposal
    string group_address = 3;

    // the deposit associated with the proposal
    repeated sdk.Coin deposit = 4;

    // usually a url making the case for the proposal
    string content = 5; 

    // additional meta data that might be used as part of 
    // decision policy
    bytes metadata = 6; 

    // an array of messages to be executed upon acceptance
    repeated sdk.Msg messages = 7;

    // When the proposal finishes
    google.protobuf.Time deadline = 8;

    // The current tally of the vote
    Tally tally = 9;

    // The final outcome of the proposal
    Choice outcome = 9;
}

message Tally {
    // the proposal the tally is tracking
    uint64 proposal_id = 1;

    // votes is an array of the choices made by group members
    repeated Choice votes = 2; 

    // relevant meta data. This is useful for caching infomation like the total 
    // accumulated weight for each choice
    bytes meta_data = 3;
}

// Vote represents a vote for a proposal.
message Vote {
    // the member of the group that voted
    string voter = 1;

    // the proposal that they are voting on
    uint64 proposal_id = 2;

    // their choice
    Choice choice = 3;

    // the weight behind their choice. This defaults to the entire weight 
    // of the member if none is described. This allows for split voting.
    string weight = 4;
}

// ThresholdDecisionPolicy implements the DecisionPolicy interface
message ThresholdDecisionPolicy {
    option (cosmos_proto.implements_interface) = "DecisionPolicy";

    // threshold is the minimum weighted sum of yes votes that must be met or exceeded for a proposal to succeed.
    string threshold = 1;
    
    // timeout is the duration from submission of a proposal to the end of voting period
    // Within this times votes and exec messages can be submitted.
    google.protobuf.Duration timeout = 2 [(gogoproto.nullable) = false];
}
