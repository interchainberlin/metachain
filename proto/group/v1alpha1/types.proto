syntax = "proto3";

package regen.group.v1alpha1;

option go_package = "github.com/interchainberlin/metachain/x/group";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";

// Member represents a group member with an account address,
// non-zero weight and metadata.
message Member {

    // address is the member's account address.
    string address = 1;
    
    // weight is the member's voting weight that should be greater than 0.
    string weight = 2;
    
    // metadata is any arbitrary metadata to attached to the member.
    bytes metadata = 3;
}

// Members defines a repeated slice of Member objects.
message Members {

    // members is the list of members.
    repeated Member members = 1 [(gogoproto.nullable) = false];
}

// Choice defines available types of choices for voting.
enum Choice {

    // CHOICE_UNSPECIFIED defines a no-op voting choice.
    CHOICE_UNSPECIFIED = 0;

    // CHOICE_NO defines a no voting choice.
    CHOICE_NO = 1;

    // CHOICE_YES defines a yes voting choice.
    CHOICE_YES = 2;

    // CHOICE_ABSTAIN defines an abstaining voting choice.
    CHOICE_ABSTAIN = 3;

    // CHOICE_VETO defines a voting choice with veto.
    CHOICE_VETO = 4;
}

//
// State
//

// GroupInfo represents the high-level on-chain information for a group.
message GroupInfo {

    // group_id is the unique ID of the group.
    uint64 group_id = 1;

    // admin is the account address of the group's admin.
    string admin = 2;
    
    // metadata is any arbitrary metadata to attached to the group.
    bytes metadata = 3;

    // version is used to track changes to a group's membership structure that
    // would break existing proposals. Whenever any members weight is changed,
    // or any member is added or removed this version is incremented and will
    // cause proposals based on older versions of this group to fail
    uint64 version = 4;

    // total_weight is the sum of the group members' weights.
    string total_weight = 5;
}

// GroupMember represents the relationship between a group and a member.
message GroupMember {

    // group_id is the unique ID of the group.
    uint64 group_id = 1;

    // member is the member data.
    Member member = 2;
}

// GroupAccountInfo represents the high-level on-chain information for a group account.
message GroupAccountInfo {
    option (gogoproto.equal)            = true;
    option (gogoproto.goproto_getters) = false;

    // address is the group account address.
    string address = 1;
    
    // group_id is the unique ID of the group.
    uint64 group_id = 2;

    // admin is the account address of the group admin.
    string admin = 3;
    
    // metadata is any arbitrary metadata to attached to the group account.
    bytes metadata = 4;

    // version is used to track changes to a group's GroupAccountInfo structure that
    // would create a different result on a running proposal.
    uint64 version = 5;

    // decision_policy specifies the group account's decision policy.
    google.protobuf.Any decision_policy = 6 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

